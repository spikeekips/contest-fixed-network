# This scenario will test,
# - 3 nodes run mitum-currency
# - 3 nodes with threshold, 100; means all nodes should be agree for new block
# - all nodes is synced
# - everything should work fine
# - create new accounts, a0
# - update currency policy
# - transfer 10 from a0 to genesis

vars: |
    {{ SetVar "NetworkID" "mitum contest; Sat 26 Dec 2020 05:29:13 AM KST" }}

    {{ SetVar "Account.Genesis.Privatekey" "L5GTSKkRs9NPsXwYgACZdodNUJqCAWjz2BccuR4cAgxJumEZWjok-0112:0.0.1" }}
    {{ SetVar "Account.Genesis.Publickey" "rcrd3KA2wWNhKdAP8rHRzfRmgp91oR9mqopckyXRmCvG-0113:0.0.1" }}
    {{ SetVar "Account.Genesis.AddressKey" "8PdeEpvqfyL3uZFHRZG5PS3JngYUzFFUGPvCg29C2dBn" }}

    {{ SetVar "Account.a0.Privatekey" "Ky9hsGeKX4PYNNQEXHE9wQfJErfr1PMgxRQsjmEJ1s5k6YDigWT2-0112:0.0.1" }}
    {{ SetVar "Account.a0.Publickey" "d9yr7HGb8XQoUvj3qqNwgdvKLCkrGPNNZ7AFZAYMZv5a-0113:0.0.1" }}
    {{ SetVar "Account.a0.AddressKey" "3BA9YEDRvn5LKwj5VDCJrBbCYLsCgTokaTTqUN9AXn3s" }}

    {{ SetVar "Account.a0.NewPrivatekey" "Kxp7sPwbRjR9dBWc6jNpg9TFRPCdSpLAJynWTCqnCm2JsDpFpfn2-0112:0.0.1" }}
    {{ SetVar "Account.a0.NewPublickey" "nhCzDCPg6CK6cusWJVFFnRTed4ddx2F9bbkPJGn2d7PJ-0113:0.0.1" }}

    {{ SetVar "OLD_CID" "MCC" }}
    {{ SetVar "CID" "XXX" }}
    {{ SetVar "CID_Amount" "100" }}
    {{ SetVar "CID_MinBalance" "10" }}
    {{ SetVar "CID_FeeerAmount" "3" }}
    {{ SetVar "CID_NewMinBalance" "10" }}
    {{ SetVar "CID_NewFeeerAmount" "6" }}

hosts:
    - weight: 2
      host: 172.17.0.1
      local: true

storage: mongodb://127.0.0.1:27017/contest
node-config:
    common: |
        {{ SetVar "Self.Address" ( printf "%s-010a:0.0.1" .Self.Alias ) }}
        {{ SetVar "Self.NetworkURL" ( printf "quic://%s:%s" .Self.Host (ContainerBindPort (printf "port.bind-%s" .Self.Alias) "udp" "54321") ) }}
        {{ SetVar "Self.StorageURI" (printf "mongodb://storage:27017/contest_%s" .Self.Alias ) }}

        address: {{ .Self.Address }}
        privatekey: {{ NewKey "Self.Privatekey" "btc" }}
        publickey: {{ with .Self.Privatekey }}{{ .Publickey }}{{ end }}
        storage:
            uri: {{ .Self.StorageURI }}
            blockdata:
                path: /data/blockdata
                wide-open: true
        network-id: {{ .NetworkID }}
        network:
            bind: quic://0.0.0.0:54321
            url: {{ .Self.NetworkURL }}

        policy:
            threshold: 100

        genesis-operations:
            - type: genesis-currencies
              account-keys:
                keys:
                    - publickey: {{ .Account.Genesis.Publickey }}
                      privatekey: {{ .Account.Genesis.Privatekey }}
                      weight: 100
                threshold: 100
              currencies:
                  - currency: {{ .OLD_CID }}
                    balance: "100"

        _nodes-config:
            address: {{ .Self.Address }}
            publickey: {{ with .Self.Privatekey }}{{ .Publickey }}{{ end }}
            url: {{ .Self.NetworkURL }}

    n0:
    n1:
    n2:

nodes-config: |
    nodes:{{ range $node, $config := .NodesConfig }}
        - address: {{ index $config "address" }}
          publickey: {{ index $config "publickey" }}
          url: {{ index $config "url" }}{{ end }}

sequences:
    - condition: >
        {"m": "contest ready"}
      action:
          name: init-nodes
          args:
              - n0
      register:
          type: last_match
          to: contest_ready

    # check genesis account is created in storage
    - condition:
        query: >
            {"key": "{{ .Account.Genesis.AddressKey }}-a000:account", "height": 0, "d.value.value.keys.keys.key": "{{ .Account.Genesis.Publickey }}", "d.value.value.keys.keys.weight": 100, "d.value.value.keys.threshold": 100}
        storage: >
            {{ .Runtime.Node.n0.Storage.URI }}/contest_n0
        col: state
    - condition:
        query: >
            {"key": "{{ .Account.Genesis.AddressKey }}-a000-{{ .OLD_CID }}:balance", "height": 0, "d.value.value.amount": "100"}
        storage: >
            {{ .Runtime.Node.n0.Storage.URI }}/contest_n0
        col: state

    - condition: >
        {"node": "n0", "x.status_code": 0, "x.m": "init node stopped without error"}

    - condition: >
        {"node": "n0", "x.m": "genesis block created"}
      action:
          name: start-nodes
          args:
              - n0
              - n1
              - n2

    - condition: >
        {"node": "n0", "x.m": "new block stored", "x.block.height": 2, "x.block.round": 0}
    - condition: >
        {"node": "n1", "x.m": "new block stored", "x.block.height": 2, "x.block.round": 0}
    - condition: >
        {"node": "n2", "x.m": "new block stored", "x.block.height": 2, "x.block.round": 0}
      # register new currency
      action:
          name: host-command
          args:
              - |
                  {{ .Runtime.Flags.RunnerFile }} seal currency-register \
                    --network-id "{{ .NetworkID }}" \
                    --feeer "fixed" \
                    --feeer-fixed-receiver "{{ .Account.Genesis.AddressKey }}-a000:0.0.1" \
                    --feeer-fixed-amount {{ .CID_FeeerAmount }} \
                    --policy-new-account-min-balance {{ .CID_MinBalance }} \
                    "{{ .Design.Node.n0.Privatekey }}" \
                    {{ .CID }} \
                    {{ .CID_Amount }} \
                    "{{ .Account.Genesis.AddressKey }}-a000:0.0.1" \
                        | {{ .Runtime.Flags.RunnerFile }} seal sign-fact \
                            "{{ .Design.Node.n1.Privatekey }}" --network-id "{{ .NetworkID }}" --seal=- \
                        | {{ .Runtime.Flags.RunnerFile }} seal sign-fact \
                            "{{ .Design.Node.n2.Privatekey }}" --network-id "{{ .NetworkID }}" --seal=- \
                        | {{ .Runtime.Flags.RunnerFile }} seal send \
                            --node "{{ .Design.Node.n2.Network.URL }}" \
                            --network-id "{{ .NetworkID }}" \
                            --seal - \
                            "{{ .Account.Genesis.Privatekey }}"

    - condition: >
        {"node": "n2", "x.m": "currency updated from mitum storage", "x.currency.height": {"$gte": 3}, "x.currency.value.value.amount.currency": "{{ .CID }}", "x.currency.value.value.amount.amount": "{{ .CID_Amount }}", "x.currency.value.value.genesis_account": "{{ .Account.Genesis.AddressKey }}-a000:0.0.1", "x.currency.value.value.policy.new_account_min_balance": "{{ .CID_MinBalance }}", "x.currency.value.value.policy.feeer.type": "fixed", "x.currency.value.value.policy.feeer.amount": "{{ .CID_FeeerAmount }}", "x.currency.value.value.policy.feeer.receiver": "{{ .Account.Genesis.AddressKey }}-a000:0.0.1"}

      # create new account, a0
      action:
          name: host-command
          args:
              - |
                  {{ .Runtime.Flags.RunnerFile }} seal create-account \
                    "{{ .Account.Genesis.Privatekey }}" \
                    "{{ .Account.Genesis.AddressKey }}-a000:0.0.1" \
                    --key "{{ .Account.a0.Publickey }},100" \
                    --threshold 100 \
                    --network-id "{{ .NetworkID }}" \
                    {{ .CID }} \
                    40 | {{ .Runtime.Flags.RunnerFile }} seal send \
                        --node "{{ .Design.Node.n2.Network.URL }}" \
                        --network-id "{{ .NetworkID }}" \
                        --seal - \
                        "{{ .Account.Genesis.Privatekey }}"

    # check genesis account is changed
    - condition:
        query: >
            {"key": "{{ .Account.Genesis.AddressKey }}-a000-{{ .CID }}:balance", "height": {"$gt": 3}, "d.value.value.amount": "60"}
        storage: >
            {{ .Runtime.Node.n0.Storage.URI }}/contest_n0
        col: state
      register:
          type: last_match
          to: a0_created

    # check a0 is created
    - condition:
        query: >
            {"key": "{{ .Account.a0.AddressKey }}-a000:account", "height": {{ .Register.a0_created.height }}, "d.value.value.keys.keys.key": "{{ .Account.a0.Publickey }}", "d.value.value.keys.keys.weight": 100, "d.value.value.keys.threshold": 100}
        storage: >
            {{ .Runtime.Node.n0.Storage.URI }}/contest_n0
        col: state

    - condition:
        query: >
            {"key": "{{ .Account.a0.AddressKey }}-a000-{{ .CID }}:balance", "height": {{ .Register.a0_created.height }}, "d.value.value.amount": "40"}
        storage: >
            {{ .Runtime.Node.n0.Storage.URI }}/contest_n0
        col: state

      # a0 send 10 to genesis account
      action:
          name: host-command
          args:
              - |
                  {{ .Runtime.Flags.RunnerFile }} seal currency-policy-updater \
                    --network-id "{{ .NetworkID }}" \
                    --feeer "fixed" \
                    --feeer-fixed-receiver "{{ .Account.Genesis.AddressKey }}-a000:0.0.1" \
                    --feeer-fixed-amount {{ .CID_NewFeeerAmount }} \
                    --policy-new-account-min-balance {{ .CID_MinBalance }} \
                    "{{ .Design.Node.n0.Privatekey }}" \
                    {{ .CID }} \
                        | {{ .Runtime.Flags.RunnerFile }} seal sign-fact \
                            "{{ .Design.Node.n1.Privatekey }}" --network-id "{{ .NetworkID }}" --seal=- \
                        | {{ .Runtime.Flags.RunnerFile }} seal sign-fact \
                            "{{ .Design.Node.n2.Privatekey }}" --network-id "{{ .NetworkID }}" --seal=- \
                        | {{ .Runtime.Flags.RunnerFile }} seal send \
                            --node "{{ .Design.Node.n2.Network.URL }}" \
                            --network-id "{{ .NetworkID }}" \
                            --seal - \
                            "{{ .Account.Genesis.Privatekey }}"

    - condition: >
        {"node": "n2", "x.m": "currency updated from mitum storage", "x.currency.height": {"$gte": {{ .Register.a0_created.height }} }, "x.currency.value.value.amount.currency": "{{ .CID }}", "x.currency.value.value.amount.amount": "{{ .CID_Amount }}", "x.currency.value.value.genesis_account": "{{ .Account.Genesis.AddressKey }}-a000:0.0.1", "x.currency.value.value.policy.new_account_min_balance": "{{ .CID_NewMinBalance }}", "x.currency.value.value.policy.feeer.type": "fixed", "x.currency.value.value.policy.feeer.amount": "{{ .CID_NewFeeerAmount }}", "x.currency.value.value.policy.feeer.receiver": "{{ .Account.Genesis.AddressKey }}-a000:0.0.1"}

      # a0 send 10 to genesis account
      action:
          name: host-command
          args:
              - |
                  {{ .Runtime.Flags.RunnerFile }} seal transfer \
                    --network-id "{{ .NetworkID }}" \
                    "{{ .Account.a0.Privatekey }}" \
                    "{{ .Account.a0.AddressKey }}-a000:0.0.1" \
                    "{{ .Account.Genesis.AddressKey }}-a000:0.0.1" \
                    {{ .CID }} \
                    10 | {{ .Runtime.Flags.RunnerFile }} seal send \
                        --node "{{ .Design.Node.n2.Network.URL }}" \
                        --network-id "{{ .NetworkID }}" \
                        --seal - \
                        "{{ .Account.a0.Privatekey }}"

    - condition:
        query: >
            {"key": "{{ .Account.a0.AddressKey }}-a000-{{ .CID }}:balance", "height": {"$gt": {{ .Register.a0_created.height }} }, "d.value.value.amount": "24"}
        storage: >
            {{ .Runtime.Node.n0.Storage.URI }}/contest_n0
        col: state
      register:
          type: last_match
          to: transfered

    - condition:
        query: >
            {"key": "{{ .Account.Genesis.AddressKey }}-a000-{{ .CID }}:balance", "height": {{ .Register.transfered.height }}, "d.value.value.amount": "76"}
        storage: >
            {{ .Runtime.Node.n0.Storage.URI }}/contest_n0
        col: state
