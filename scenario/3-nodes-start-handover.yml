# This scenario will test,
# - 3 nodes, `no0`, `no1`, `no2`
# - threshold is 100
# - `no0`: *init* before *run*
# - all nodes, starts
# - new node, `no3` starts
# - `no3` has same node with `no2`, but has different publish url
# - `no3` starts handover 
# - `no3` moves to consensus
# - the duplicated node, `no2` moves to syncing
# - `no2` starts handover 
# - `no2` moves to consensus
# - the duplicated node, `no3` moves to syncing
vars: |
    {{ SetVar "NetworkID" "mitum contest; Sat 26 Dec 2020 05:29:13 AM KST" }}

    {{ SetVar "Account.Genesis.Privatekey" "L5GTSKkRs9NPsXwYgACZdodNUJqCAWjz2BccuR4cAgxJumEZWjokmpr" }}
    {{ SetVar "Account.Genesis.Publickey" "rcrd3KA2wWNhKdAP8rHRzfRmgp91oR9mqopckyXRmCvGmpu" }}

    {{ NewKey "N2Privatekey" }}
    {{ SetVar "N2Address" "no2sas" }}

    {{ SetVar "CID" "MCC" }}

hosts:
    - weight: 2
      host: 172.17.0.1
      local: true

storage: mongodb://127.0.0.1:27017/contest
node-config:
    common: |
        {{ SetVar "Self.Address" ( printf "%ssas" .Self.Alias ) }}
        {{ SetVar "Self.NetworkURL" ( printf "https://%s:%s" .Self.Host (ContainerBindPort (printf "port.bind-%s" .Self.Alias) "udp" "54321") ) }}
        {{ SetVar "Self.StorageURI" (printf "mongodb://storage:27017/contest_%s" .Self.Alias ) }}
        {{ SetVar "Genesis.Privatekey" (NewKey "key-genesis") }}

        address: {{ .Self.Address }}
        privatekey: {{ NewKey "Self.Privatekey" }}
        publickey: {{ with .Self.Privatekey }}{{ .Publickey }}{{ end }}
        storage:
            database:
                uri: {{ .Self.StorageURI }}
            blockdata:
                path: /data/blockdata
        network-id: {{ .NetworkID }}
        network:
            bind: https://0.0.0.0:54321
            url: {{ .Self.NetworkURL }}

        policy:
            threshold: 100

        genesis-operations:
            - type: genesis-currencies
              account-keys:
                keys:
                    - publickey: {{ .Account.Genesis.Publickey }}
                      privatekey: {{ .Account.Genesis.Privatekey }}
                      weight: 100
                threshold: 100
              currencies:
                  - currency: {{ .CID }}
                    balance: "99999999999999999999"
                    feeer:
                      type: fixed
                      amount: 1

        time-server: ""

        suffrage:
            nodes:
                - no0sas
                - no1sas
                - no2sas

        _nodes-config:
            address: {{ if eq .Self.Alias "no3" }}{{ .N2Address }}{{ else }}{{ .Self.Address }}{{ end }}
            publickey: {{ if eq .Self.Alias "no3" }}{{ with .N2Privatekey }}{{ .Publickey }}{{ end }}{{ else }}{{ with .Self.Privatekey }}{{ .Publickey }}{{ end }}{{ end }}

    no0:
    no1:
    no2: |
        address: {{ .N2Address }}
        privatekey: {{ .N2Privatekey }}
        publickey: {{ with .N2Privatekey }}{{ .Publickey }}{{ end }}
    no3: |
        address: {{ .N2Address }}
        privatekey: {{ .N2Privatekey }}
        publickey: {{ with .N2Privatekey }}{{ .Publickey }}{{ end }}

nodes-config: |
    nodes:{{ range $node, $config := .NodesConfig }}{{ if ne $node "no3" }}{{ if and ( eq $.Alias "no3" ) ( eq $node "no2" ) }}{{ else }}{{ if eq $node "no2" }}
        - address: {{ $.N2Address }}
          publickey: {{ with $.N2Privatekey }}{{ .Publickey }}{{ end }}
          {{ else }}
        - address: {{ index $config "address" }}
          publickey: {{ index $config "publickey" }}{{ end }}{{ end }}{{ end }}{{ end }}

sequences:
    - condition: >
        {"m": "contest ready"}
      action:
          name: init-nodes
          nodes:
              - no0

    - condition: >
        {"node": "no0", "x.status_code": 0, "x.m": "init node stopped without error"}

    - condition: >
        {"node": "no0", "x.m": "genesis block created"}
      action:
          name: start-nodes
          nodes:
              - no0
              - no1
              - no2
          args:
              - "--discovery"
              - "{{ .Design.Node.no0.Network.URL }}#insecure"
              - "--discovery"
              - "{{ .Design.Node.no1.Network.URL }}#insecure"
              - "--discovery"
              - "{{ .Design.Node.no2.Network.URL }}#insecure"

    - condition: >
        {"node": "no0", "x.m": "joined discovery"}
    - condition: >
        {"node": "no1", "x.m": "joined discovery"}
    - condition: >
        {"node": "no2", "x.m": "joined discovery"}

    - condition: >
        {"node": "no0", "x.m": "new block stored", "x.block.height": 1, "x.block.round": 0}
    - condition: >
        {"node": "no1", "x.m": "new block stored", "x.block.height": 1, "x.block.round": 0}
    - condition: >
        {"node": "no2", "x.m": "new block stored", "x.block.height": 1, "x.block.round": 0}
      action:
          name: start-nodes
          nodes:
              - no3
          args:
              - "--discovery"
              - "{{ .Design.Node.no0.Network.URL }}#insecure"
              - "--discovery"
              - "{{ .Design.Node.no1.Network.URL }}#insecure"
 
    - condition: >
        {"node": "no3", "x.m": {"$regex": "duplicated node found"}}

    - condition: >
        {"node": "no3", "x.underhandover": true, "x.m": "investigated"}

    - condition: >
        {"node": "no3", "x.state_context.to": "SYNCING"}
      register:
          type: last_match
          to: no3_underhandover

    - condition: >
        {"_id": {"$gt": "{{ .Register.no3_underhandover._id }}" }, "node": "no0", "x.m": "new block stored"}
      register:
          type: last_match
          to: no0_new_block

    - condition: >
        {"_id": {"$gt": "{{ .Register.no3_underhandover._id }}" }, "node": "no0", "x.m": "new block stored"}
      register:
          type: last_match
          to: no1_new_block_0

    - condition: >
        {"_id": {"$gt": "{{ .Register.no3_underhandover._id }}" }, "node": "no0", "x.m": "new block stored"}
      register:
          type: last_match
          to: no2_new_block

    - condition: >
        {
            "_id": {"$gt": "{{ .Register.no0_new_block._id }}" },
            "node": "no0",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no0_new_block.x.block.height }} }
        }
    - condition: >
        {
            "_id": {"$gt": "{{ .Register.no1_new_block_0._id }}" },
            "node": "no1",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no1_new_block_0.x.block.height }} }
        }
    - condition: >
        {
            "_id": {"$gt": "{{ .Register.no2_new_block._id }}" },
            "node": "no2",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no2_new_block.x.block.height }} }
        }

    - condition: >
        {
            "_id": {"$gt": "{{ .Register.no2_new_block._id }}" },
            "node": "no3",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no2_new_block.x.block.height }} }
        }

      # start handover to no3
      action:
          name: host-command
          args:
              - |
                  {{ .Runtime.Flags.RunnerFile }} node start-handover \
                    --log-level debug \
                    --log-format json \
                    "{{ .N2Address }}" \
                    "{{ .N2Privatekey }}" \
                    "{{ .NetworkID }}" \
                    "{{ .Design.Node.no3.Network.URL }}" \
                    --tls-insecure
      register:
          type: last_match
          to: no3_start_handover_request

    - condition: >
        {"_id": {"$gt": "{{ .Register.no3_start_handover_request._id }}" }, "node": "no3", "x.m": {"$regex": "duplicated node found"}}

    - condition: >
        {"_id": {"$gt": "{{ .Register.no3_start_handover_request._id }}" }, "node": "no3", "x.underhandover": true, "x.m": "investigated"}

    - condition: >
        {"_id": {"$gt": "{{ .Register.no3_start_handover_request._id }}" }, "node": "no3", "x.m": "joined discovery"}

    - condition: >
        {"node": "no3", "x.state_context.from": "SYNCING", "x.state_context.to": "HANDOVER"}

    - condition: >
        {"node": "no3", "x.state_context.from": "HANDOVER", "x.state_context.to": "CONSENSUS"}
      register:
          type: last_match
          to: no3_consensus

    - condition: >
        {"node": "no2", "x.state_context.from": "CONSENSUS", "x.state_context.to": "SYNCING"}
    - condition: >
        {"node": "no2", "x.m": "left from discovery"}

    - condition: >
        { "_id": {"$gt": "{{ .Register.no3_consensus._id }}" }, "node": "no0", "x.m": "new block stored" }
      register:
          type: last_match
          to: no1_new_block_0

    - condition: >
        {
            "node": "no0",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no1_new_block_0.x.block.height }} }
        }
    - condition: >
        {
            "node": "no1",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no1_new_block_0.x.block.height }} }
        }
    - condition: >
        {
            "node": "no2",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no1_new_block_0.x.block.height }} }
        }

    - condition: >
        {
            "node": "no3",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no1_new_block_0.x.block.height }} }
        }

      # start handover to no2 again
      action:
          name: host-command
          args:
              - |
                  {{ .Runtime.Flags.RunnerFile }} node start-handover \
                    --log-level debug \
                    --log-format json \
                    "{{ .N2Address }}" \
                    "{{ .N2Privatekey }}" \
                    "{{ .NetworkID }}" \
                    "{{ .Design.Node.no2.Network.URL }}" \
                    --tls-insecure
      register:
          type: last_match
          to: no2_start_handover_request

    - condition: >
        {"_id": {"$gt": "{{ .Register.no2_start_handover_request._id }}" }, "node": "no2", "x.m": {"$regex": "duplicated node found"}}

    - condition: >
        {"_id": {"$gt": "{{ .Register.no2_start_handover_request._id }}" }, "node": "no2", "x.underhandover": true, "x.m": "investigated"}

    - condition: >
        {"_id": {"$gt": "{{ .Register.no2_start_handover_request._id }}" }, "node": "no2", "x.m": "joined discovery"}

    - condition: >
        {"_id": {"$gt": "{{ .Register.no2_start_handover_request._id }}" }, "node": "no2", "x.state_context.from": "SYNCING", "x.state_context.to": "HANDOVER"}

    - condition: >
        {"_id": {"$gt": "{{ .Register.no2_start_handover_request._id }}" }, "node": "no2", "x.state_context.from": "HANDOVER", "x.state_context.to": "CONSENSUS"}
      register:
          type: last_match
          to: no2_consensus

    - condition: >
        {"_id": {"$gt": "{{ .Register.no2_start_handover_request._id }}" }, "node": "no3", "x.state_context.from": "CONSENSUS", "x.state_context.to": "SYNCING"}
    - condition: >
        {"_id": {"$gt": "{{ .Register.no2_start_handover_request._id }}" }, "node": "no3", "x.m": "left from discovery"}

    - condition: >
        { "_id": {"$gt": "{{ .Register.no2_consensus._id }}" }, "node": "no0", "x.m": "new block stored" }
      register:
          type: last_match
          to: no1_new_block_1

    - condition: >
        {
            "node": "no0",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no1_new_block_1.x.block.height }} }
        }
    - condition: >
        {
            "node": "no1",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no1_new_block_1.x.block.height }} }
        }
    - condition: >
        {
            "node": "no2",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no1_new_block_1.x.block.height }} }
        }

    - condition: >
        {
            "node": "no3",
            "x.m": "new block stored",
            "x.block.height": {"$gt": {{ .Register.no1_new_block_1.x.block.height }} }
        }
